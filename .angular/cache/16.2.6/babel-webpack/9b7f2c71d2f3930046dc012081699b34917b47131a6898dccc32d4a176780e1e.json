{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class LivreService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiURL = 'http://localhost:9095/livres/api'; // Changed API URL\n    this.apiURL_auteur = 'http://localhost:9095/livres/api/auteur'; // Changed API URL for authors\n  }\n\n  listeLivres() {\n    return this.http.get(this.apiURL + \"/all\");\n  }\n  ajouterLivre(livre) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.post(this.apiURL + \"/addlivre\", livre, {\n      headers: httpHeaders\n    });\n  }\n  supprimerLivre(id) {\n    const url = `${this.apiURL}/dellivre/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.delete(url, {\n      headers: httpHeaders\n    });\n  }\n  consulterLivre(id) {\n    const url = `${this.apiURL}/getbyid/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.get(url, {\n      headers: httpHeaders\n    });\n  }\n  trierLivres() {\n    this.livres = this.livres.sort((n1, n2) => {\n      if (n1 && n2 && n1.idLivre && n2.idLivre) {\n        if (n1.idLivre > n2.idLivre) {\n          return 1;\n        }\n        if (n1.idLivre < n2.idLivre) {\n          return -1;\n        }\n        return 0;\n      }\n      return 0;\n    });\n  }\n  updateLivre(livre) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.put(this.apiURL + \"/updatelivre\", livre, {\n      headers: httpHeaders\n    });\n  }\n  listerAuteurs() {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.get(this.apiURL_auteur, {\n      headers: httpHeaders\n    });\n  }\n  rechercheParAuteur(idAuteur) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    const url = `${this.apiURL}/livreAuteur/${idAuteur}`;\n    return this.http.get(url, {\n      headers: httpHeaders\n    });\n  }\n  consulterAuteur(id) {\n    const auteurTrouve = this.auteurs.find(auteur => auteur.idAuteur == id);\n    if (auteurTrouve) {\n      return auteurTrouve;\n    } else {\n      throw new Error(`Auteur non trouvé pour l'ID : ${id}`);\n    }\n  }\n  rechercherParNom(nom) {\n    const url = `${this.apiURL}/livreByName/${nom}`;\n    return this.http.get(url);\n  }\n  ajouterAuteur(auteur) {\n    return this.http.post(this.apiURL_auteur, auteur, httpOptions);\n  }\n  static #_ = this.ɵfac = function LivreService_Factory(t) {\n    return new (t || LivreService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LivreService,\n    factory: LivreService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","httpOptions","headers","LivreService","constructor","http","authService","apiURL","apiURL_auteur","listeLivres","get","ajouterLivre","livre","jwt","getToken","httpHeaders","post","supprimerLivre","id","url","delete","consulterLivre","trierLivres","livres","sort","n1","n2","idLivre","updateLivre","put","listerAuteurs","rechercheParAuteur","idAuteur","consulterAuteur","auteurTrouve","auteurs","find","auteur","Error","rechercherParNom","nom","ajouterAuteur","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["D:\\2éme annéé\\s1\\angular\\bibliotheque\\src\\app\\services\\Livre.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Livre } from '../model/Livre.model';\nimport { AuthService } from './auth.service';\nimport { Auteur } from '../model/auteur.model'; // Changed import\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LivreService { // Changed service name\n\n  apiURL: string = 'http://localhost:9095/livres/api'; // Changed API URL\n  apiURL_auteur: string = 'http://localhost:9095/livres/api/auteur'; // Changed API URL for authors\n\n  livres !: Livre[]; // Changed type\n  auteurs!: Auteur[]; // Changed type\n\n  constructor(private http: HttpClient,\n    private authService: AuthService) { }\n\n  listeLivres(): Observable<Livre[]> { // Changed method name and return type\n    return this.http.get<Livre[]>(this.apiURL + \"/all\");\n  }\n\n  ajouterLivre(livre: Livre): Observable<Livre> { // Changed method name and parameter type\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.post<Livre>(this.apiURL + \"/addlivre\", livre, { headers: httpHeaders });\n  }\n\n  supprimerLivre(id: number) { // Changed method name\n    const url = `${this.apiURL}/dellivre/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.delete(url, { headers: httpHeaders });\n  }\n\n  consulterLivre(id: number): Observable<Livre> { // Changed method name and return type\n    const url = `${this.apiURL}/getbyid/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.get<Livre>(url, { headers: httpHeaders });\n  }\n\n  trierLivres() { // Changed method name\n    this.livres = this.livres.sort((n1, n2) => {\n      if (n1 && n2 && n1.idLivre && n2.idLivre) {\n        if (n1.idLivre > n2.idLivre) {\n          return 1;\n        }\n        if (n1.idLivre < n2.idLivre) {\n          return -1;\n        }\n        return 0;\n      }\n      return 0;\n    });\n\n  }\n  updateLivre(livre: Livre): Observable<Livre> { // Changed method name and parameter type\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.put<Livre>(this.apiURL + \"/updatelivre\", livre, { headers: httpHeaders });\n  }\n\n  listerAuteurs(): Observable<Auteur[]> { // Changed method name and return type\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.get<Auteur[]>(this.apiURL_auteur, { headers: httpHeaders });\n  }\n\n  rechercheParAuteur(idAuteur: number): Observable<Livre[]> { // Changed method name and parameter type\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    const url = `${this.apiURL}/livreAuteur/${idAuteur}`;\n    return this.http.get<Livre[]>(url, { headers: httpHeaders });\n  }\n\n  consulterAuteur(id: number): Auteur { // Changed method name and return type\n    const auteurTrouve = this.auteurs.find(auteur => auteur.idAuteur == id);\n    if (auteurTrouve) {\n      return auteurTrouve;\n    } else {\n      throw new Error(`Auteur non trouvé pour l'ID : ${id}`);\n    }\n  }\n\n  rechercherParNom(nom: string): Observable<Livre[]> { // Changed method name\n    const url = `${this.apiURL}/livreByName/${nom}`;\n    return this.http.get<Livre[]>(url);\n  }\n\n  ajouterAuteur(auteur: Auteur): Observable<Auteur> { // Changed method name and parameter type\n    return this.http.post<Auteur>(this.apiURL_auteur, auteur, httpOptions);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}